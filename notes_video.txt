
Things changed when testing:
- rocket -> mid_flight -> num_frames=500 AND takeoff: 50
- gen_objects -> init_frames + 2000 + roc_gi['frames_max'] < P.FRAMES_TOT_BODIES)

========================================================

watch -n 0.5 nvidia-smi

====

[Proposed video title]: "Matplotlib Animations vs Pygame"

CONTENTS:
- Which looks better?
- Performance (speed/memory)
- Ease-of-use

- [Intro draft]. As a Python programmer I, like many others, use Matplotlib for basic data visualization. Visualization was always an "extension" to the core of my particular work, compared to "visualization first", "code second" - people, those are "animation artists", "graphics engineers" etc.,  they normally work with software that is way more capable than Matplotlib, like Blender, Unity, Godot or OpenGL. So here's the niche for this video: You use Python and you've probably used Matplotlib for some visualizations, and now you want to work in the same IDE you always have been working in, to try some animation, without needing to learn Blender/Unity etc. And now you're wondering, should I use Matplotlib and its Animation library for this, or should I try something else, like Pygame? Because Matplotlib has its limits. I considered trying Manim as well, but I got this prejudice about it that it's "too mathy". PyQt was another option. But it became "Matplotlib Animations versus Pygame", so basically I ran some experiments to see which is better. Here is an overview of the topics that will be covered.

1. 2D motion graphics - same video using Matplotlib Animations and Pygame.
1. The "stutter" problem
1. Technical set up for comparison experiments.
1. Experiment results.
1. Ease of use: Side-by-side code comparison


1. Scope *First an important caveat or delimitation of this video is that it focuses almost exclusively on using cropped images or png's, that are moved around in a 2D animation, it's called "motion graphics" or "image panning". This is pretty far away from Matplotlib animation's core usecase, which is basically looking something like this, take some data points and plot them through time. For this "image panning", what I use instead is this matplotlib transforms library and its Affine2D function. Which is definitely nailing it when it comes to ease of use: Like, for an image, first it's scaled, rotated ... here, and all one has to do in an animation is to say how much it should be scaled, rotated etc each frame. I'll get back to it later, but the point is, if you're thinking about animating some data points without using any png or other images, you will most probably be perfectly fine doing it with matplotlib, all of the woes with matplotlib in this video have to do with this image panning thing.
2. And basically the title for it is ... the "stutter" problem. Look at this: These planets stutter. I've spent many hours trying to figure out why, and more hours doing various complex workarounds to limit this problem. Including, replacing matplotlib with Pygame to see if its any better, and here's how it looks in Pygame. It's definitely still there. I'll talk about this in more depth in the results section.
3. Technical set up: Here's the list of features: Matplotlib FuncAnimation vs Pygame 2.0. There is this ArtistAnimation alternative to FuncAnimation that I've never even tried, but from what I've heard it isn't supposed to be any better. The animation was rendered in either 1920x1080 or 1280x720 resolution. Frames Per Second, for most experiments it was set to 100. So I used two computers, a 10 year old laptop that's worth maybe 200 us dollars today, no GPU, and a workstation worth about 700 us dollars that houses the Nvidia RTX 3050 GPU. Both these computers are with Linux, Ubuntu distribution, but that probably doesn't affect the point of my experiments too much. Then this parameter says whether the animation is written to an mp4 file, or whether its shown live.

- Summarize the two philosophies: "One of the hidden triumphs of matplotlib: it gives you a high-level animation and rendering API where you don’t need to know graphics fundamentals. It’s intentionally 'mathematical-plotting-first, graphics-second.' (that’s perfect—until it’s not).". "Pygame expects you to build the rendering yourself. You control the framerate, what gets drawn, how things move, and how they’re layered. In exchange for that manual labor, you get performance, flexibility, and GPU acceleration."
 - Go deeper on point above: A standard mpl user is a data scientist who is highly familiar with numpy and scipy. So that person might come in to the visualization stage with a bunch of not only data but also "data sophistication", like the idea that it would be crazy to do any computations inside the animation loop. As compared to some Pygame kid that knows nothing about data, but starts showing the game-canvas and then starts moving a hero using rect.x += 10. The biggest thing the Pygame kid learns in Pygame, is not somthing like numpy, but rather basic Object Orientation, where you have these default "Hero" objects, that have these coordinates about where the object is, when it's supposed to show and when it isn't. As with any "built-in" library structures, they have strengths and weaknesses: Strength: It allows fast computation. Weakness: See to_surface function: It's crazy that you have to remove alpha channel and then add it later + no built-in write support.
 - More on GPU: "Matplotlib still renders every frame with CPU — GPU encoding doesn’t help frame gen. Adding h264_nvenc will only shave a few seconds off for encoding (writing?), not rendering". "Each artist goes through a full transform + draw pipeline. Bigger artists = more anti-aliasing, alpha blending, CPU layout check. Matplotlib does no GPU rasterization (explain 'rasterization' more)".
- Rendering Control: Pygame is less black box, more manual. An example: In mpl, you just set blit=True and live-animation becomes faster. In Pygame, you have to set each object to blit, and this, by extension, leads you to want to understand better what blitting is doing.
- Leading to this point: Pygame assumes you will use class objects for various things to move around on the canvas, and there are built-in things for that purpose, such as Rect, Surface, and Group. Versus mpl, where the standard usecase is some Python coder who quickly wants to visualize some data, often in a single script.
- The "stutter" problem (resolution and "smoothness"). Pygame is pixel-first — all transforms happen after rasterization. E.g., you have to do int() before blitting, so it's explicitly working with ints. Matplotlib uses antialiasing and transforms at a floating point vector level before rasterization. E.g., you can feed float points into Affine2D but internally when plotting these will then become ints. This has the problem that the Matplotlib user may think that float point coordinates will be kept, when they won't. When I first encountered the "stutter" problem I thought it was some data-rounding bug on my end. So Pygame is much more clear about what level of "smoothness" one can expect in the animation (i.e. int).
- Go through the differences in the respective main functions. Include that "==" for a certain frame is convenient and that it cannot fail for this type of program because frames can't be skipped (that's more a real-time problem).
- Experiments:
  - Resolution test.
  - Check RAM usage just before starting the animation loop, and when running it.
  - Run on laptop.


